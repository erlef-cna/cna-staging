#!/usr/bin/env elixir

Mix.install([
  {:jason, "~> 1.4"}
])

defmodule CVEFormatter do
  def format(content) do
    content
    |> Jason.decode!(objects: :ordered_objects)
    |> sort_objects_recursively()
    |> Jason.encode!(pretty: true, escape: :unicode_safe)
    |> fix_lowercase_unicode_escapes()
  end

  defp sort_objects_recursively(data)

  defp sort_objects_recursively(data) when is_list(data),
    do: Enum.map(data, &sort_objects_recursively/1)

  defp sort_objects_recursively(%Jason.OrderedObject{values: values} = object) do
    %{
      object
      | values:
          values
          |> Enum.map(fn {key, value} -> {key, sort_objects_recursively(value)} end)
          |> Enum.sort_by(&elem(&1, 0))
    }
  end

  defp sort_objects_recursively(data), do: data

  defp fix_lowercase_unicode_escapes(content),
    do: String.replace(content, ~r/\\u([0-9a-f]{4})/i, fn match -> String.downcase(match) end)
end

defmodule CLI do
  @records_base_path Path.expand("../records", __DIR__)
  @reservations_path Path.expand("reservations", @records_base_path)

  import CVEFormatter

  def run(argv)

  def run(["format"]) do
    for record_path <- record_paths() do
      content = File.read!(record_path)
      formatted = format(content)

      if formatted != content do
        File.write!(record_path, formatted)
        IO.puts("Formatted: #{record_path}")
      else
        IO.puts("No changes: #{record_path}")
      end
    end
  end

  def run(["check-formatted"]) do
    for record_path <- record_paths() do
      content = File.read!(record_path)
      formatted = format(content)

      if formatted != content do
        diff = get_diff(record_path, formatted)

        IO.puts("""
        Unformatted: #{record_path}
        Diff:
        #{diff}
        """)

        System.halt(1)
      end
    end
  end

  def run(_args) do
    script_path = :escript.script_name()
    script_path = List.to_string(script_path)

    IO.puts("""
    Usage: #{script_path} [command]

    Commands:
      format  - Format the CVE records
      check-formatted - Check if the CVE records are formatted correctly
    """)
  end

  defp record_paths,
    do:
      Path.wildcard(Path.join([@records_base_path, "**", "*.json"])) --
        Path.wildcard(Path.join(@reservations_path, "*.json"))

  defp get_diff(record_path, formatted) do
    tmp_file = Path.join(System.tmp_dir!(), "#{:erlang.crc32(formatted)}.tmp")
    File.write!(tmp_file, formatted)

    try do
      {diff, 1} = System.cmd("diff", [record_path, tmp_file])
      diff
    after
      File.rm!(tmp_file)
    end
  end
end

CLI.run(System.argv())
